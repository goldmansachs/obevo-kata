<!--

    Copyright 2017 Goldman Sachs.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.goldmansachs.obevo-kata</groupId>
    <artifactId>obevo-kata</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    
    <name>Obevo Kata</name>
    <description>Obevo Kata is an example project for the Obevo tool.</description>
    <url>https://github.com/goldmansachs/obevo-kata/</url>
    <inceptionYear>2017</inceptionYear>

    <organization>
        <name>Goldman Sachs</name>
        <url>http://www.goldmansachs.com/</url>
    </organization>

    <licenses>
        <license>
            <name>The Apache License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>


    <properties>
        <obevo.version>local-SNAPSHOT</obevo.version>
        <jdk.version>1.8</jdk.version>

        <kata.deployUser>katadeployer</kata.deployUser>
        <kata.deployPassword>katadeploypass</kata.deployPassword>

        <hibernate.version>5.4.0.Final</hibernate.version>
    </properties>

    <repositories>
        <repository>
            <id>snapshots-repo</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </repository>
    </repositories>

    <dependencyManagement>
        <dependencies>
            <!-- Use the obevo-bom to have your obevo version numbers declared in one place for your dependencies.
             Note - this does not apply for plugins -->
            <dependency>
                <groupId>com.goldmansachs.obevo</groupId>
                <artifactId>obevo-bom</artifactId>
                <version>${obevo.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>com.goldmansachs.obevo</groupId>
            <artifactId>obevo-hibernate5-util</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate.version}</version>
            <optional>true</optional>  <!-- optional to prevent distribution and keep out GPL license -->
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-envers</artifactId>
            <version>${hibernate.version}</version>
            <optional>true</optional>  <!-- optional to prevent distribution and keep out GPL license -->
        </dependency>

        <dependency>
            <groupId>com.goldmansachs.obevo</groupId>
            <artifactId>obevo-db-unittest-util</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.goldmansachs.obevo</groupId>
            <artifactId>obevo-db</artifactId>
            <classifier>tests</classifier>
            <version>${obevo.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.goldmansachs.obevo</groupId>
            <artifactId>obevo-db-postgresql</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.goldmansachs.obevo</groupId>
            <artifactId>obevo-db-hsql</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.7.18</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>

            <!-- Include this plugin and edit the appropriate names. This is all the Obevo plugins you need in your pom to run tests during your build -->
            <!-- Note - you can run "mvn test" locally to run this against your validation environment to check that your DDLs are valid -->
            <plugin>
                <groupId>com.goldmansachs.obevo</groupId>
                <artifactId>obevo-maven-plugin</artifactId>
                <version>${obevo.version}</version>
                <executions>
                    <execution>
                        <id>test-db-module</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <env>test</env>
                            <user>${kata.deployUser}</user>
                            <password>${kata.deployPassword}</password>
                            <sourcePath>${basedir}/src/main/database/lesson/deploy</sourcePath>
                            <validateBaseline>true</validateBaseline>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <!-- Standard Maven plugins - you can modify this as needed in your own project these in as needed -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>

                <configuration>
                    <source>${jdk.version}</source>
                    <target>${jdk.version}</target>
                </configuration>
            </plugin>
        </plugins>
    </build>




    <!--
    NOTE - these profiles are not meant to be included in client Obevo projects or used by clients trying out the Obevo example.
    The profiles are here so that the Obevo maintainers can run this through a build and simulate the steps that users do manually.
    -->
    <profiles>
        <profile>
            <id>windowsBuild</id>
            <activation>
                <os>
                    <family>Windows</family>
                </os>
            </activation>
            <properties>
                <script.suffix>bat</script.suffix>
                <forkDbIntAnt>true</forkDbIntAnt>
            </properties>
        </profile>
        <profile>
            <id>linuxBuild</id>
            <activation>
                <os>
                    <family>Unix</family>
                </os>
            </activation>
            <properties>
                <script.suffix>sh</script.suffix>
                <!-- we will background the process via nohup in the script itself -->
                <forkDbIntAnt>false</forkDbIntAnt>
            </properties>
        </profile>
        <profile>
            <!-- This is only here for the continuous build - users of Obevo won't need this -->
            <id>continuousBuild</id>

            <properties>
                <!--<obevo.download.url>https://github.com/goldmansachs/obevo/releases/download/${obevo.version}/obevo-cli-${obevo.version}-dist.zip</obevo.download.url>-->
                <obevo.download.url>file:///Users/shantstepanian/IdeaProjects/obevo/obevo-dists/obevo-cli/target/obevo-cli-local-SNAPSHOT-dist.zip</obevo.download.url>
                <obevo.download.dir>${basedir}/target/obevo-download</obevo.download.dir>
                <obevo.tmp.dir>${basedir}/target/obevo-tmp</obevo.tmp.dir>
                <obevo.executable>${obevo.download.dir}/bin/deploy.${script.suffix}</obevo.executable>
                <kata.platform>hsql</kata.platform>
                <!--<kata.platform>postgresql</kata.platform>-->
                <kata.standardDeployArgs>-noPrompt -deployUserId ${kata.deployUser} -password ${kata.deployPassword}</kata.standardDeployArgs>
                <kata.setupDir>${basedir}/kata-files/setup/${kata.platform}</kata.setupDir>
                <kata.lesson1Dir>${basedir}/kata-files/lesson1</kata.lesson1Dir>
                <kata.lesson2Dir>${basedir}/kata-files/lesson2/${kata.platform}</kata.lesson2Dir>
                <kata.jdbcUrl>jdbc:hsqldb:hsql://localhost:9092/obevokata</kata.jdbcUrl>
                <!--<kata.jdbcUrl>jdbc:postgresql://localhost:5432/postgres</kata.jdbcUrl>-->
                <kata.lesson2.outputdir>${basedir}/target/lesson2-reveng</kata.lesson2.outputdir>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <id>download-obevo-and-restart-db</id>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <phase>generate-test-sources</phase>
                                <configuration>
                                    <target>
                                        <echo message="*** Kata Setup ***" />

                                        <echo message="Downloading and unzipping Obevo" />
                                        <mkdir dir="${obevo.tmp.dir}" />
                                        <get src="${obevo.download.url}"
                                             dest="${obevo.tmp.dir}/dist.zip"
                                             verbose="true"
                                             usetimestamp="true"/>
                                        <delete dir="${obevo.download.dir}" />
                                        <unzip src="${obevo.tmp.dir}/dist.zip"
                                               dest="${obevo.download.dir}" />
                                        <chmod dir="${obevo.download.dir}/bin" perm="755" includes="*.sh" />
                                        <chmod dir="${kata.setupDir}" perm="755" includes="*.sh" />

                                        <echo message="Shutting down DB beforehand" />
                                        <exec executable="${kata.setupDir}/shutdownDb.${script.suffix}" />
                                        <delete dir="${kata.setupDir}/katadb" />

                                        <echo message="Starting DB" />
                                        <exec executable="${kata.setupDir}/startDb.${script.suffix}"
                                              failonerror="true"
                                              spawn="${forkDbIntAnt}" />

                                        <echo message="Initing DB environment with schema infrastructure" />
                                        <exec executable="${kata.setupDir}/initDb.${script.suffix}" failonerror="true" />

                                        <echo message="*** Kata Setup Complete ***" />
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>run-kata-lesson1</id>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <!-- this needs to run before the unit test, as the unit test depends on the third kata
                                 step files to be there -->
                                <phase>process-test-sources</phase>
                                <configuration>
                                    <target>
                                        <echo message="*** Kata Lesson1 ***" />

                                        <echo message="Executing Lesson1 Step1: Initial Deploy" />
                                        <exec executable="${kata.lesson1Dir}/kata-step1.${script.suffix}" failonerror="true" />
                                        <exec executable="${obevo.executable}" failonerror="true">
                                            <arg line="DEPLOY -cleanFirst ${kata.standardDeployArgs} -sourcePath src/main/database/lesson/deploy/system-config-${kata.platform}.xml" />
                                        </exec>

                                        <echo message="Executing Lesson1 Step2: Modification Deploy" />
                                        <exec executable="${kata.lesson1Dir}/kata-step2.${script.suffix}" failonerror="true" />
                                        <exec executable="${obevo.executable}" failonerror="true">
                                            <arg line="DEPLOY ${kata.standardDeployArgs} -sourcePath src/main/database/lesson/deploy/system-config-${kata.platform}.xml" />
                                        </exec>

                                        <echo message="Executing Lesson1 Step3: Modification Deploy" />
                                        <exec executable="${kata.lesson1Dir}/kata-step3.${script.suffix}" failonerror="true" />
                                        <exec executable="${obevo.executable}" failonerror="true">
                                            <arg line="DEPLOY ${kata.standardDeployArgs} -sourcePath src/main/database/lesson/deploy/system-config-${kata.platform}.xml" />
                                        </exec>

                                        <echo message="Executing Lesson1 Step4: Modification Deploy" />
                                        <exec executable="${kata.lesson1Dir}/kata-step4.${script.suffix}" failonerror="true" />
                                        <exec executable="${obevo.executable}" failonerror="true">
                                            <arg line="DEPLOY ${kata.standardDeployArgs} -sourcePath src/main/database/lesson/deploy/system-config-${kata.platform}.xml" />
                                        </exec>

                                        <!-- Putting back step 1 to prep for the rest of the test -->
                                        <exec executable="${kata.lesson1Dir}/kata-step1.${script.suffix}" failonerror="true" />

                                        <echo message="*** Kata Lesson1 Complete ***" />
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>run-kata-lesson2</id>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <phase>process-test-sources</phase>
                                <configuration>
                                    <target>
                                        <echo message="*** Kata Lesson2 ***" />

                                        <echo message="Initializing DB for Lesson2" />
                                        <exec executable="${kata.lesson2Dir}/initDb-lesson2.${script.suffix}" failonerror="true" />

                                        <echo message="Executing Lesson2 Step1: reverse-engineer the DB" />
                                        <exec executable="${obevo.executable}" failonerror="true">
                                            <arg line="NEWREVENG -mode SCHEMA -dbType ${kata.platform} -jdbcUrl ${kata.jdbcUrl} -dbSchema MYLARGESCHEMA -username ${kata.deployUser} -password ${kata.deployPassword} -outputPath ${kata.lesson2.outputdir}" />
                                        </exec>

                                        <echo message="Executing Lesson2 Step2: modify the system-config.xml file" />
                                        <replace file="${kata.lesson2.outputdir}/final/system-config.xml" token="dbHost=&quot;myDevHost.me.com&quot; dbPort=&quot;1234&quot; dbServer=&quot;myServer (if applicable)&quot;" value="jdbcUrl=&quot;${kata.jdbcUrl}&quot; dbSchemaSuffix=&quot;_DEV1&quot;" />

                                        <echo message="Executing Lesson2 Step3: Redeploy the reverse-engineered content to a new dev DB" />
                                        <exec executable="${obevo.executable}" failonerror="true">
                                            <arg line="DEPLOY ${kata.standardDeployArgs} -sourcePath ${kata.lesson2.outputdir}/final -env dev1" />
                                        </exec>

                                        <echo message="Executing Lesson2 Step4: Initialize the production schema" />
                                        <exec executable="${obevo.executable}" failonerror="true">
                                            <arg line="INIT ${kata.standardDeployArgs} -sourcePath ${kata.lesson2.outputdir}/final -env prod" />
                                        </exec>

                                        <echo message="Executing Lesson2 Step5: Verify new migrations still work" />
                                        <exec executable="${obevo.executable}" failonerror="true">
                                            <arg line="DEPLOY ${kata.standardDeployArgs} -sourcePath ${kata.lesson2.outputdir}/final -env dev1" />
                                        </exec>
                                        <exec executable="${obevo.executable}" failonerror="true">
                                            <arg line="DEPLOY ${kata.standardDeployArgs} -sourcePath ${kata.lesson2.outputdir}/final -env prod" />
                                        </exec>

                                        <echo message="*** Kata Lesson2 Complete ***" />
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>shutdown-db-after-tests</id>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <phase>prepare-package</phase>
                                <configuration>
                                    <target>
                                        <echo message="Shutting down DB afterward" />
                                        <exec executable="${kata.setupDir}/shutdownDb.${script.suffix}" />
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.jasig.maven</groupId>
                        <artifactId>maven-notice-plugin</artifactId>
                        <version>1.1.0</version>
                        <configuration>
                            <noticeTemplate>${basedir}/internal/build/NOTICE.template.txt</noticeTemplate>
                            <licenseMapping>
                                <param>${basedir}/internal/build/license-mappings.xml</param>
                            </licenseMapping>
                            <fileName>NOTICE.txt</fileName>
                            <includeChildDependencies>false</includeChildDependencies>
                            <includeScopes>
                                <includeScopes>compile</includeScopes>
                                <includeScopes>runtime</includeScopes>
                            </includeScopes>
                            <excludeOptional>true</excludeOptional>
                        </configuration>
                        <executions>
                            <execution>
                                <id>check-license</id>
                                <phase>process-sources</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- Using apache-rat-plugin to check that the license files are applied correctly. This is used by
                         many Apache-licensed projects for validation; hence we use it here. -->
                        <groupId>org.apache.rat</groupId>
                        <artifactId>apache-rat-plugin</artifactId>
                        <version>0.12</version>
                        <configuration>
                            <addLicenseHeaders>false</addLicenseHeaders>
                            <copyrightMessage>Copyright 2017 Goldman Sachs.</copyrightMessage>
                            <excludes>
                                <!-- Standard project files to exclude -->
                                <exclude>**/.idea/**</exclude>
                                <exclude>**/dco/*.dco</exclude>
                                <exclude>**/.travis.yml</exclude>
                                <exclude>**/BUILD.md</exclude>
                                <exclude>**/CHANGELOG.md</exclude>
                                <exclude>**/CONTRIBUTING.md</exclude>
                                <exclude>**/CONTRIBUTOR_COVENANT.md</exclude>
                                <exclude>**/LICENSE.txt</exclude>
                                <exclude>**/NOTICE.txt</exclude>
                                <exclude>**/NOTICE.template.txt</exclude>
                                <exclude>**/README.md</exclude>
                                <exclude>**/*.dot</exclude>

                                <!-- Other SP/sql files to exclude that weren't automatically applied by the mycila plugin originally -->
                                <exclude>**/*.csv</exclude>
                                <exclude>**/kata-files/lesson1/**</exclude>
                                <exclude>**/src/main/database/lesson/deploy/DEMO_SCHEMA/**</exclude>
                                <exclude>**/kata-files/lesson2/**/expected/**</exclude>
                                <exclude>**/setup/hsql/katadb/**</exclude>
                                <exclude>**/src/main/database/lesson/reveng/**</exclude>
                            </excludes>
                        </configuration>
                        <executions>
                            <execution>
                                <id>run-rat-check</id>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
